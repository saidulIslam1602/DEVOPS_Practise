# =============================================================================
# AquaCulture Frontend Nginx Configuration
# =============================================================================
#
# This Nginx configuration is optimized for serving the React/Vue single-page
# application (SPA) for the AquaCulture monitoring system. It provides:
# - High-performance static file serving
# - SPA routing support (client-side routing)
# - API proxy to backend services
# - Security headers for web application protection
# - Compression for faster loading
# - Caching strategies for optimal performance
# - Health check endpoint for container orchestration
#
# Performance Features:
# - Gzip compression reduces bandwidth by 60-80%
# - Static asset caching with long expiration times
# - Efficient proxy configuration for API calls
# - Optimized buffer sizes and timeouts
#
# Security Features:
# - XSS protection headers
# - Content type sniffing prevention
# - Clickjacking protection
# - Referrer policy configuration
# - Real IP forwarding for proper logging
# =============================================================================

# Main Server Block - Frontend Application
# ========================================
# Serves the React/Vue frontend application and proxies API requests
server {
    # Network Configuration
    # ====================
    listen 80;                              # Listen on standard HTTP port
    server_name localhost;                  # Server name (can be configured for production domains)
    
    # Document Root Configuration
    # ==========================
    root /usr/share/nginx/html;             # Static files location (from Docker build)
    index index.html;                       # Default file to serve
    
    # ==========================================================================
    # COMPRESSION CONFIGURATION
    # ==========================================================================
    # Enable Gzip compression to reduce bandwidth usage and improve loading times
    
    gzip on;                                # Enable Gzip compression
    gzip_vary on;                           # Add Vary: Accept-Encoding header
    gzip_min_length 1024;                   # Only compress files larger than 1KB
    gzip_proxied any;                       # Compress responses for all proxied requests
    gzip_comp_level 6;                      # Compression level (1-9, 6 is good balance)
    
    # File types to compress (covers most web assets)
    gzip_types
        text/plain                          # Plain text files
        text/css                            # CSS stylesheets
        text/xml                            # XML files
        text/javascript                     # JavaScript files
        application/x-javascript            # Legacy JavaScript MIME type
        application/xml+rss                 # RSS feeds
        application/json                    # JSON data
        application/javascript              # Modern JavaScript MIME type
        application/xml                     # XML applications
        image/svg+xml                       # SVG images
        font/truetype                       # TrueType fonts
        font/opentype                       # OpenType fonts
        application/vnd.ms-fontobject;      # EOT fonts

    # ==========================================================================
    # SECURITY HEADERS
    # ==========================================================================
    # Implement security best practices to protect against common web vulnerabilities
    
    # Clickjacking Protection
    # ======================
    # Prevents the site from being embedded in frames on other domains
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # Content Type Sniffing Protection
    # ===============================
    # Prevents browsers from MIME-sniffing responses away from declared content-type
    add_header X-Content-Type-Options "nosniff" always;
    
    # XSS Protection
    # ==============
    # Enables built-in XSS protection in modern browsers
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Referrer Policy
    # ===============
    # Controls how much referrer information is included with requests
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Content Security Policy (CSP) - Uncomment and customize for production
    # =====================================================================
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;" always;

    # ==========================================================================
    # SINGLE PAGE APPLICATION ROUTING
    # ==========================================================================
    # Handle client-side routing for React/Vue applications
    
    # Main SPA Location Block
    # ======================
    # Serves static files and falls back to index.html for client-side routes
    location / {
        # Try to serve the requested file, then directory, then fall back to index.html
        # This enables client-side routing (React Router, Vue Router, etc.)
        try_files $uri $uri/ /index.html;
        
        # Additional headers for SPA
        add_header Cache-Control "no-cache, no-store, must-revalidate";  # Prevent caching of index.html
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # ==========================================================================
    # API PROXY CONFIGURATION
    # ==========================================================================
    # Proxy API requests to the backend FastAPI service
    
    # API Proxy Location Block
    # =======================
    # Forwards all /api requests to the backend API service
    location /api {
        # Backend service configuration (Docker Compose service name)
        proxy_pass http://api:8000;         # Forward to API service on port 8000
        
        # HTTP Protocol Configuration
        # ==========================
        proxy_http_version 1.1;             # Use HTTP/1.1 for better connection handling
        
        # WebSocket Support
        # ================
        # Enable WebSocket proxying for real-time features
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        
        # Request Headers for Backend
        # ==========================
        proxy_set_header Host $host;                           # Original host header
        proxy_set_header X-Real-IP $remote_addr;              # Client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # IP forwarding chain
        proxy_set_header X-Forwarded-Proto $scheme;           # Original protocol (http/https)
        proxy_set_header X-Forwarded-Host $server_name;       # Original host name
        
        # Timeout Configuration
        # ====================
        proxy_connect_timeout 60s;          # Connection timeout to backend
        proxy_send_timeout 60s;             # Timeout for sending request to backend
        proxy_read_timeout 60s;             # Timeout for reading response from backend
        
        # Buffer Configuration
        # ===================
        proxy_buffering on;                  # Enable response buffering
        proxy_buffer_size 4k;               # Buffer size for response headers
        proxy_buffers 8 4k;                 # Number and size of buffers for response body
    }

    # ML Service Proxy (if needed for direct access)
    # ==============================================
    # Uncomment if frontend needs direct access to ML service
    # location /ml {
    #     proxy_pass http://ml-service:8001;
    #     proxy_http_version 1.1;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # ==========================================================================
    # STATIC ASSET CACHING
    # ==========================================================================
    # Aggressive caching for static assets that don't change frequently
    
    # Static Assets with Fingerprinting
    # =================================
    # Cache assets with long expiration times (assumes build process adds hashes to filenames)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;                          # Cache for 1 year
        add_header Cache-Control "public, immutable";  # Mark as immutable (won't change)
        
        # CORS headers for fonts (if serving from different domain)
        location ~* \.(woff|woff2|ttf|eot)$ {
            add_header Access-Control-Allow-Origin "*";
        }
        
        # Optimize image serving
        location ~* \.(png|jpg|jpeg|gif|webp)$ {
            # Add image-specific optimizations
            add_header Vary "Accept-Encoding";
        }
    }
    
    # Manifest and Service Worker Files
    # ================================
    # Special handling for PWA files that need shorter cache times
    location ~* \.(manifest\.json|sw\.js|workbox-.*\.js)$ {
        expires 1d;                          # Cache for 1 day only
        add_header Cache-Control "public, no-transform";
    }

    # ==========================================================================
    # HEALTH CHECK ENDPOINT
    # ==========================================================================
    # Provide health check endpoint for container orchestration and monitoring
    
    # Health Check Location
    # ====================
    # Simple health check that doesn't generate access logs
    location /health {
        access_log off;                      # Don't log health check requests
        return 200 "healthy\n";             # Return simple success response
        add_header Content-Type text/plain; # Set appropriate content type
    }
    
    # Detailed Health Check (Optional)
    # ===============================
    # More comprehensive health check that verifies static files
    location /health/detailed {
        access_log off;
        try_files /index.html =503;         # Verify index.html exists
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","service":"frontend","timestamp":"$time_iso8601"}';
    }

    # ==========================================================================
    # ERROR HANDLING
    # ==========================================================================
    # Custom error pages and handling
    
    # Custom Error Pages
    # =================
    # Serve custom error pages for better user experience
    error_page 404 /index.html;             # Serve SPA for 404s (client-side routing)
    error_page 500 502 503 504 /50x.html;   # Server error page
    
    # Error Page Location
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;                            # Only accessible via error_page directive
    }

    # ==========================================================================
    # LOGGING CONFIGURATION
    # ==========================================================================
    # Configure access and error logging
    
    # Custom Log Format for Better Debugging
    log_format frontend_access '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              '$request_time $upstream_response_time';
    
    # Apply custom log format
    access_log /var/log/nginx/access.log frontend_access;
    error_log /var/log/nginx/error.log warn;

    # ==========================================================================
    # SECURITY RESTRICTIONS
    # ==========================================================================
    # Block access to sensitive files and directories
    
    # Block Hidden Files
    # =================
    location ~ /\. {
        deny all;                           # Block access to .htaccess, .env, etc.
        access_log off;
        log_not_found off;
    }
    
    # Block Backup Files
    # ==================
    location ~ ~$ {
        deny all;                           # Block access to backup files
        access_log off;
        log_not_found off;
    }
    
    # Block Source Maps in Production
    # ==============================
    # Uncomment in production to hide source maps
    # location ~ \.map$ {
    #     deny all;
    #     access_log off;
    #     log_not_found off;
    # }
}

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================
#
# SSL/HTTPS Configuration:
# 1. Add SSL certificate configuration for production
# 2. Redirect HTTP to HTTPS
# 3. Configure HSTS headers for security
# 4. Use strong SSL ciphers and protocols
#
# Performance Tuning:
# 1. Adjust worker_processes and worker_connections in main nginx.conf
# 2. Configure appropriate buffer sizes based on your application
# 3. Enable HTTP/2 for better performance
# 4. Consider using nginx caching for API responses
#
# Security Enhancements:
# 1. Implement Content Security Policy (CSP) headers
# 2. Add rate limiting for API endpoints
# 3. Configure fail2ban for brute force protection
# 4. Use ModSecurity or similar WAF for additional protection
#
# Monitoring and Logging:
# 1. Configure log rotation to prevent disk space issues
# 2. Set up log aggregation (ELK stack, Fluentd, etc.)
# 3. Monitor nginx metrics with Prometheus exporter
# 4. Set up alerts for error rates and response times
#
# CDN Integration:
# 1. Configure appropriate Cache-Control headers for CDN
# 2. Set up origin pull configuration
# 3. Implement cache invalidation strategies
# 4. Configure geographic distribution for global users
# =============================================================================
